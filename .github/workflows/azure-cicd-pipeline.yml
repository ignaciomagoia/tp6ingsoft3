name: Azure CI/CD Pipeline - TP06

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "22"
  GO_VERSION: "1.23"
  FRONTEND_DIR: frontend
  ARTIFACT_NAME: todo-app
  QA_WEBAPP_NAME: tp06-app-qa-ignaciojulian
  PROD_WEBAPP_NAME: tp06-app-prod-ignaciojulian
  QA_BASE_URL: https://tp06-app-qa-ignaciojulian.azurewebsites.net
  PROD_BASE_URL: https://tp06-app-prod-ignaciojulian.azurewebsites.net

jobs:
  # -------------------------------
  # 1Ô∏è‚É£ BUILD + TEST + PACKAGE
  # -------------------------------
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend setup
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Go modules
        run: go mod download

      - name: Run Go unit tests
        run: go test ./... -v -cover

      - name: Build Go backend
        run: |
          mkdir -p build/backend
          go build -o build/backend/server .

      # Frontend setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      # Crear estructura de release
      - name: Prepare deployment bundle
        run: |
          mkdir -p release/backend
          mkdir -p release/frontend
          cp build/backend/server release/backend/
          cp go.mod go.sum release/backend/
          cp -r frontend/build release/frontend/
          echo "#!/usr/bin/env bash" > release/start.sh
          echo "set -e" >> release/start.sh
          echo 'export PORT=${PORT:-8080}' >> release/start.sh
          echo 'export MONGO_URI=${MONGO_URI:-}' >> release/start.sh
          echo 'if [ -z "$MONGO_URI" ]; then echo "MONGO_URI is required"; exit 1; fi' >> release/start.sh
          echo './backend/server' >> release/start.sh
          chmod +x release/start.sh

      - name: Archive artifact
        run: |
          cd release
          zip -r ../deployment-package.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: deployment-package.zip

  # -------------------------------
  # 2Ô∏è‚É£ DEPLOY TO QA (autom√°tico)
  # -------------------------------
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: qa
      url: ${{ env.QA_BASE_URL }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      - name: Deploy to Azure Web App (QA)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.QA_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_QA_PUBLISH_PROFILE }}
          package: deployment-package.zip

      - name: Wait for deployment
        run: sleep 60

      - name: QA Health Check
        run: |
          echo "üè• Running QA health check..."
          for i in {1..10}; do
            status=$(curl -ks -o /dev/null -w "%{http_code}" "${{ env.QA_BASE_URL }}/healthz")
            if [ "$status" -eq 200 ]; then
              echo "‚úÖ QA OK!"
              exit 0
            fi
            echo "Attempt $i: status $status, retrying..."
            sleep 15
          done
          echo "‚ùå QA failed after 10 attempts"
          exit 1

  # -------------------------------
  # 3Ô∏è‚É£ DEPLOY TO PRODUCTION (manual)
  # -------------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-qa]
    environment:
      name: production
      url: ${{ env.PROD_BASE_URL }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      - name: Validate production secret
        run: |
          if [ -z "${{ secrets.AZURE_PROD_PUBLISH_PROFILE }}" ]; then
            echo "‚ùå Falta el secret AZURE_PROD_PUBLISH_PROFILE."
            exit 1
          fi

      - name: Deploy to Azure Web App (PROD)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.PROD_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PROD_PUBLISH_PROFILE }}
          package: deployment-package.zip

      - name: Wait for deployment
        run: sleep 60

      - name: Production Health Check
        run: |
          echo "üè• Running PROD health check..."
          for i in {1..10}; do
            status=$(curl -ks -o /dev/null -w "%{http_code}" "${{ env.PROD_BASE_URL }}/healthz")
            if [ "$status" -eq 200 ]; then
              echo "‚úÖ PROD OK!"
              exit 0
            fi
            echo "Attempt $i: status $status, retrying..."
            sleep 15
          done
          echo "‚ùå PROD failed after 10 attempts"
          exit 1
